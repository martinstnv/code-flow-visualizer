

const { bfs, getAdjacent, synthesize } = require('../utils/bfs.js');

test('Should find all possible paths.', () => {

    const adjacent = [
        [1, 8],
        [2],
        [3, 5],
        [4],
        [7],
        [6],
        [7],
        [8],
        [9, 29],
        [10],
        [11, 16, 29],
        [12, 14, 15, 29],
        [13],
        [29],
        [29],
        [29],
        [17],
        [18, 20, 21, 29],
        [19],
        [29],
        [29],
        [22],
        [23, 25],
        [24],
        [29],
        [26],
        [27, 28],
        [29],
        [29],
        [30],
    ];

    const queue = [
        { visited: { 0: true }, path: [0] }
    ];

    const result = bfs(adjacent, queue);

    const expected_result = [
        [0, 8, 29, 30],
        [0, 8, 9, 10, 29, 30],
        [0, 8, 9, 10, 16, 17, 29, 30],
        [0, 8, 9, 10, 16, 17, 21, 22, 25, 26, 28, 29, 30],
        [0, 8, 9, 10, 16, 17, 21, 22, 25, 26, 27, 29, 30],
        [0, 8, 9, 10, 16, 17, 21, 22, 23, 24, 29, 30],
        [0, 8, 9, 10, 16, 17, 20, 29, 30],
        [0, 8, 9, 10, 16, 17, 18, 19, 29, 30],
        [0, 8, 9, 10, 11, 29, 30],
        [0, 8, 9, 10, 11, 15, 29, 30],
        [0, 8, 9, 10, 11, 14, 29, 30],
        [0, 8, 9, 10, 11, 12, 13, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 28, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 27, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 21, 22, 23, 24, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 20, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 15, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 28, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 27, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 21, 22, 23, 24, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 20, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 18, 19, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 15, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 29, 30],
    ];
    expect(result).toStrictEqual(expected_result);
});

test('Should synthesize all paths.', () => {
    const nodes = [ 
        {index: 0, level: 0, token: "main", src: ""},
        {index: 1, level: 1, token: "if", src: "('blabla'==='bla')"},
        {index: 2, level: 2, token: "n/a", src: "varname='John';varage=18;"},
        {index: 3, level: 2, token: "if", src: "(name==='John'&&age===18)"},
        {index: 4, level: 3, token: "n/a", src: "console.log('HelloJohn!');"},
        {index: 5, level: 2, token: "else", src: ""},
        {index: 6, level: 3, token: "n/a", src: "vara=5;varc=5+5;"},
        {index: 7, level: 2, token: "n/a", src: "varb=4;vard=4+4;"},
        {index: 8, level: 1, token: "n/a", src: "console.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');"},
        {index: 9, level: 1, token: "if", src: "(0==false)"},
        {index: 10, level: 2, token: "n/a", src: "console.log('Zeroisfalse!');"},
        {index: 11, level: 2, token: "if", src: "(1==true)"},
        {index: 12, level: 3, token: "if", src: "(1===0)"},
        {index: 13, level: 4, token: "n/a", src: "console.log('Falseequalstrue!!!');"},
        {index: 14, level: 3, token: "elseif", src: "(true===false)"},
        {index: 15, level: 3, token: "elseif", src: "('impossible'===false)"},
        {index: 16, level: 2, token: "elseif", src: "('Thisisthetrickypart!')"},
        {index: 17, level: 3, token: "n/a", src: "varwill_continue=true;"},
        {index: 18, level: 3, token: "if", src: "(will_continue==true)"},
        {index: 19, level: 4, token: "n/a", src: "console.log('Youwin!');"},
        {index: 20, level: 3, token: "elseif", src: "(blabla2)"},
        {index: 21, level: 3, token: "elseif", src: "(blabla)"},
        {index: 22, level: 4, token: "n/a", src: "console.log('Youlose!');"},
        {index: 23, level: 4, token: "if", src: "(true==6)"},
        {index: 24, level: 5, token: "n/a", src: "console.log('Continue?!');"},
        {index: 25, level: 4, token: "else", src: ""},
        {index: 26, level: 5, token: "n/a", src: "console.log('Impossibletoreach!');"},
        {index: 27, level: 5, token: "if", src: "('maramara'=='koshmara')"},
        {index: 28, level: 5, token: "else", src: ""},
        {index: 29, level: 0, token: "n/a", src: "console.log('Thisistheend!');"},
        {index: 30, level: 1, token: "end", src: ""},
    ];

    const all_paths = [
        [0, 8, 29, 30],
        [0, 8, 9, 10, 29, 30],
        [0, 8, 9, 10, 16, 17, 29, 30],
        [0, 8, 9, 10, 16, 17, 21, 22, 25, 26, 28, 29, 30],
        [0, 8, 9, 10, 16, 17, 21, 22, 25, 26, 27, 29, 30],
        [0, 8, 9, 10, 16, 17, 21, 22, 23, 24, 29, 30],
        [0, 8, 9, 10, 16, 17, 20, 29, 30],
        [0, 8, 9, 10, 16, 17, 18, 19, 29, 30],
        [0, 8, 9, 10, 11, 29, 30],
        [0, 8, 9, 10, 11, 15, 29, 30],
        [0, 8, 9, 10, 11, 14, 29, 30],
        [0, 8, 9, 10, 11, 12, 13, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 28, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 27, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 21, 22, 23, 24, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 20, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 15, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 29, 30],
        [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 28, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 21, 22, 25, 26, 27, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 21, 22, 23, 24, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 20, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 16, 17, 18, 19, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 15, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 29, 30],
        [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 29, 30],
    ];

    const result = [];
    for (const path of all_paths) {
        result.push(synthesize(nodes, path));
    }

    const expected_result = [
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nelse\nn/aconsole.log('Impossibletoreach!');\nelse\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nelse\nn/aconsole.log('Impossibletoreach!');\nif('maramara'=='koshmara')\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nif(true==6)\nn/aconsole.log('Continue?!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla2)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nif(will_continue==true)\nn/aconsole.log('Youwin!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nelseif('impossible'===false)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nelseif(true===false)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nif(1===0)\nn/aconsole.log('Falseequalstrue!!!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nelse\nn/aconsole.log('Impossibletoreach!');\nelse\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nelse\nn/aconsole.log('Impossibletoreach!');\nif('maramara'=='koshmara')\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nif(true==6)\nn/aconsole.log('Continue?!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla2)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nif(will_continue==true)\nn/aconsole.log('Youwin!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nelseif('impossible'===false)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nelseif(true===false)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nelse\nn/avara=5;varc=5+5;\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nif(1===0)\nn/aconsole.log('Falseequalstrue!!!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nelse\nn/aconsole.log('Impossibletoreach!');\nelse\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nelse\nn/aconsole.log('Impossibletoreach!');\nif('maramara'=='koshmara')\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla)\nn/aconsole.log('Youlose!');\nif(true==6)\nn/aconsole.log('Continue?!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nelseif(blabla2)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nelseif('Thisisthetrickypart!')\nn/avarwill_continue=true;\nif(will_continue==true)\nn/aconsole.log('Youwin!');\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nelseif('impossible'===false)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nelseif(true===false)\nn/aconsole.log('Thisistheend!');\nend\n",
        "main\nif('blabla'==='bla')\nn/avarname='John';varage=18;\nif(name==='John'&&age===18)\nn/aconsole.log('HelloJohn!');\nn/avarb=4;vard=4+4;\nn/aconsole.log('Iamhere!');console.log('Iamthere!');console.log('Iameverywhere!');\nif(0==false)\nn/aconsole.log('Zeroisfalse!');\nif(1==true)\nif(1===0)\nn/aconsole.log('Falseequalstrue!!!');\nn/aconsole.log('Thisistheend!');\nend\n",
    ];

    expect(result).toStrictEqual(expected_result);
});

test('Should return an adjacent list',() => {

    const expected_result = [
        [1, 8],
        [2],
        [3, 5],
        [4],
        [7],
        [6],
        [7],
        [8],
        [9, 29],
        [10],
        [11, 16, 29],
        [12, 14, 15, 29],
        [13],
        [29],
        [29],
        [29],
        [17],
        [18, 20, 21, 29],
        [19],
        [29],
        [29],
        [22],
        [23, 25],
        [24],
        [29],
        [26],
        [27, 28],
        [29],
        [29],
        [30],
    ];

    const nodes = [
        {from: 0, to: 1 },
        {from: 0, to: 8 },
        {from: 1, to: 2 },
        {from: 2, to: 3 },
        {from: 2, to: 5 },
        {from: 3, to: 4 },
        {from: 4, to: 7 },
        {from: 5, to: 6 },
        {from: 6, to: 7 },
        {from: 7, to: 8 },
        {from: 8, to: 9 },
        {from: 8, to: 29 },
        {from: 9, to: 10 },
        {from: 10, to: 11 },
        {from: 10, to: 16 },
        {from: 10, to: 29 },
        {from: 11, to: 12 },
        {from: 11, to: 14 },
        {from: 11, to: 15 },
        {from: 11, to: 29 },
        {from: 12, to: 13 },
        {from: 13, to: 29 },
        {from: 14, to: 29 },
        {from: 15, to: 29 },
        {from: 16, to: 17 },
        {from: 17, to: 18 },
        {from: 17, to: 20 },
        {from: 17, to: 21 },
        {from: 17, to: 29 },
        {from: 18, to: 19 },
        {from: 19, to: 29 },
        {from: 20, to: 29 },
        {from: 21, to: 22 },
        {from: 22, to: 23 },
        {from: 22, to: 25 },
        {from: 23, to: 24 },
        {from: 24, to: 29 },
        {from: 25, to: 26 },
        {from: 26, to: 27 },
        {from: 26, to: 28 },
        {from: 27, to: 29 },
        {from: 28, to: 29 },
        {from: 29, to: 30 },
    ];

    const result = getAdjacent(nodes)

    expect(result).toStrictEqual(expected_result);
});